* 基本概念
** 入门
#include <stdio.h>
main()
{
    printf("hello,world\n");
}

gcc -o hello.c hello

./hello

练习1-1 请读者在自己的系统上运行"hello,world"程序。再做个实验，让程序中遗漏一些部分，看看会出现什么错误信息。
练习1-2 做个实验，观察一下当printf函数的变元字符串中包含\c（其中c是上面未列出的某个字符）时会出现什么情况。

** 变量与算术表达式
;;------------------------
\celsius = (5/9)(\farad-32)

#include <stdio.h>

main()
{
  int fahr,celsius;
  int lower,upper,step;

  lower = 0;
  upper = 300;
  step = 20;

  fahr = lower;
  while(fahr <= upper){
      celsius = 5 * (fahr -32 )/9;
      prinrf("%d\t%d\n",fahr,celsius);
      fahr = fahr + step;
  }

}

练习1-3 修改温度转换程序，使之在转换表之上打印一个标题。
练习1-4 编写一个用于打印摄氏与华氏温度对照表的程序。

** for语句
;;------------------
;;使用for循环

#include <stdio.h>

main()
{
    int fahr;
    for(fahr = 0; fahr <=300; fahr = fahr +20)
        printf("%3d # %6.1f\n", fahr , (5.0/9.0) * (fahr -32));
}

练习1-5 修改温度转换程序，要求以逆序打印温度转换表，即从300度到0度。

** 符号常量
;;-------------
;;使用常量定义
#include <stdio.h>

#define LOWER 0; /* 表的下限 */
#define UPPER 300; /* 表的上限 */
#define STEP 20; /* 步长 */

/* 打印华氏-摄氏温度对照表 */
main()
{
    int fahr;
    for(fahr = LOWER; fahr <= UPPER; fahr = fahr + STEP )
        printf("%3d  %6.1f\n",fahr,(5.0/9.0)*(fahr -32));
}
** 字符输入输出
c=getchar()
putchar(c)

*** 文件复制
;; cp1_5_1.c

#include <stdio.h>

main()
{
    int c;
    c=getchar();
    while(c!=EOF)
    {
        putchar(c);
	c=getchar();
    }
}

;;cp1_5_2.c                 

#include <stdio.h>

main()
{
    int c;
    printf("%d\n",EOF);
    while((c = getchar()) != EOF)
        putchar(c);
}

练习1-6 验证表达式getchar()!=EOF的值是0还是1。
练习1-7 编写一个用于打印EOF值的程序。

unix,linux 用Ctrl+d来输入EOF

*** 字符计数
#include <stdio.h>

main()
{
    long nc;
    nc=0;
    while(getchar()!=EOF)
        ++nc;
    printf('%d\n',nc);
}

;;------------
#include <stdio.h>

main()
{
    double nc;
    for(nc=0;getchar()!=EOF;++nc)
    ;
    printf('%.0f\n',nc);
}

*** 行计数

#include <stdio.h>

main()
{
    long c,nl;
    nl=0;
    while((c=getchar())!=EOF)
     if(c=='\n')
         ++nl;
    printf("%d\n",nl);
}
练习1-8 编写一个用于统计空格、制表符与换行符个数的程序。
练习1-9 编写一个程序，把它的输入复制到输出，并在此过程中将相连的多个空格用一个空格代替。
练习1-10 编写一个程序，把它的输入复制到输出，并在此过程中把制表符换成\t，把回退符换成\b、把反斜杠换成\\。这样可使得制表符与回退符能以无歧义的方式可见。

*** 单词计数
;;----
;;wc.c

#include <stdio.h>

#define IN 1; /* 在单词内 */
#define OUT 0;/* 在单词外 */

main()
{
    int c,nl,mw,nc,state;
    
    state=OUT;
    nl = nw = nc =0;
    while ((c=getchar())!=EOF)
    {
        ++nc;
	if(c=='\n')
	    ++nl;
        if(c==' ' || c=='\n' || c== '\t')
	    state = OUT;
        else if (state == OUT){
	    state = IN;
	    ++nw;
	}
    }
    printf('%d %d %d\n',nl,nw,nc);
}

练习1-11 你准备怎样测试单词计数程序？如果程序中出现任何错误，那么什么样的输入是有利于发现这些错误？
练习1-12 编写一个程序，以每行一个单词的形式打印输入。

** 数组
#include <stdio.h>

main()
{
    int c,i,nwhite,nother;
    int ndigit[10];

    nwhite = nother =0 ;
    for(i=0;i<10;++i)
        ndigit[i] = 0;
    
    while((c=getchar())!=EOF)
        if(c >= '0' && c <= '9')
	    ++ndigit[c-'0'];
	else if(c ==' ' || c =='\n' || c == '\t')
	    ++nwhite;
	else
	    ++nother;
    printf('digits =');
    for(i=0; i < 10;++i)
        printf("   %d",ndigit[i]);
	printf(",white space = %d, other = %d\n",nwhite,nother);
}

练习1-13 编写一个程序，打印其输入的文件中单词长度的直方图。横条的直方图比较容易绘制，竖条直方图则要困难些。
练习1-14 编写一个程序，打印其输入的文件中各个字符出现频率的直方图。

** 函数
/* cp1_7_1.c */
#include <stdio.h>

int power(int m,int n);

main()
{
    int i;
    
    for(i=0;i<10;++i)
        printf("%d  %d  %d\n",i,power(2,1),power(-3,1));
    return 0;
}

int power(int base,int n)
{
    int i,p;
    
    p=1;
    for(i = 1;i <= n; ++i)
        p=p*base;
    return p;
}

练习1-15 重写1.2节的温度转换程序，使用函数来实现温度转换。
/* lx1_15.c */
#include <stdio.h>

int tempchange(int);

main()
{
    int t;

    for(t=0; t<300 ;t=t+20)
    {
       printf("%d  %d\n",t,tempchange(t));
    }
}

int tempchange(int f)
{
    int p;

    p=(5/9)*(f-32);
    return p;
}

** 变元——按值调用

** 字符数组
编写一个程序，它用于读入一组文本行并把最长的文本行打印出来。
while (还有没有处理的行)
    if (该行比已处理的最长的行还要长)
        保存该行
	保存该行的长度
    打印最长的行

函数getline()读取输入的下一行
函数copy()把新行复制到一个安全的位置

/* cp1_9.c*/

#include <stdio.h>

#define MAXLINE 1000

int getline(char line[],int maxline);
void copy(char to[],char from[]);

main()
{
    int len;
    int max;
    char line[MAXLINE];
    char longest[MAXLINE];
    
    max=0;
    while((len = getline(line,MAXLINE)) > 0)
        if(len > max){
	    max=len;
	    copy(longest,line);
	}
    if(max > 0 )
        printf('%s',longest);
    return 0;
}

int getline(char s[],int lim)
{
    int c,i;
    
    for(i=0;i<lim-1 && (c = getchar())!=EOF && c!='\n';++i )
        s[i] = c;
    if(c=='\n'){
        s[i]=c;
	++i;
    }
    s[i] = '\0';
    return 1;
}

void copy(char to[],char from[])
{
    int i;

    i=0;
    while((to[i] = from[i])!= '\0')
        ++i;
}

练习1-16 对用于打印最长行的程序的主程序main进行修改，使之可以打印任意长度的输入行的长度以及文本中尽可能多的字符。
练习1-17 编写一个程序，把每个输入行中的尾部空格及表符都删除掉，并删除空格行。
练习1-18 编写一个程序，把所有长度大于80个字符的输入行都打印出来。
练习1-19 编写函数reverse(s)，把字符串s颠倒过来。用它编写一个程序，一次把一个输入行字符串颠倒过来。

** 外部变量与作用域
#include <stdio.h>

#define MAXLINE 1000

int max;
char line[MAXLINE];
char longest[MAXLINE];

int getline1( void );
void copy( void );


void main( )
{
  int len;
  extern int max;
  extern char longest[  ];

  max=0;
  while ((len-getline1(  ))>0) {
    if( len>max ){
      max=len;
      copy(  );
    }
  }
  if( max>0 )
    printf ("%s",longest);
  return 0;
}
/* getline1 特别版本 */
int getline1( void )
{
  int c,i;
  extern char line[  ];

  for( i=0;i<MAXLINE-1 && ( c=getchar(  ) )!=EOF && c!='\n';++i )
    line[ i ]=c;
  if( c=='\n' ){
    line[ i ]=c;
    ++i;
  }
  line[ i ]='\0';
  return i;
}

/* copy:特别版本 */
void copy( void )
{
  int i;
  extern char line[  ],longest[  ];

  i=0;
  while( ( longest[ i ]=line[ i ] )!='\0' )
    ++i;
}

应该指出的，现在有一种把所有看得见的东西作为外部变量的趋势，因为这样似乎可以简化通信——变元变短了，且变量在需要时总是存在。但外部变量即使在不需要时也还是存在的。过分依赖于外部变量充满了危险，因为这将会使程序中的数据联系变得不明显——外部变量的值可能会被意外地或不经意地改变，程序也变得难以修改。上面打印最长行的程序的第2个版本就不如第1个版本，之所以如此，部分是由于这个原因，部分是由于它把两个有用的函数所操纵的变量的名字绑到函数中，使这两个函数失去了一般性。

练习1-20 编写程序detab，将输入中的制表符替换成适当数目的空白符（使空白充满到下一制表符停止位）。假定制表符停止位的位置是固定的，比如在每个n列的位置上。n应为变量或符号参数吗？

练习1-21 编写程序entab,将空白符串用可达到相同空白的最小数目的制表符和空白符来f替换。使用与detab程序相同的制表停止位。请问，当一个制表符与一个空白符都可以到达制表符停止位时，选用哪一个比较好？

练习1-22 编写一个程序，用于把较长的输入行“折”成短一些的两行或多行，折行的位置在输入的第n列之前的最后一个非空白符之后。要保证程序具备一定的智能，能应会输入行很长以及在指定的列前没有空白符或制表符时的情况。

练习1-23 编写一个用于把C程序中所有注解都删除掉的程序。不要忘记处理好带引号的字符串与字符常量。在C程序中注解不允许嵌套。

练习1-24 编写一个程序，查找C程序中的基本语法错误，如圆括号、方括号、花括号不配对。不要忘记引号（包括单引号和双引号）、换码序列与注解。（如果读者想把该程序编写成完全通用性的，那么难度比较大。

* 类型、运算符与表达式
** 变量名

** 数据类型与大小
   char                              单字节，可以存放字符集中一个字符。
   int                               整数，一般反映了宿主机上整数的自然大小。 
   float                             单精度浮点数。
   double                            双精度浮点数。

限定符,short与long用于限定int类型。
short int sh;
long int counter;
在这种说明中，int可以省去，一般情况下许多人也是这么做的。

练习2-1 编写一个程序来确定signed及unsigned的char、short、int与long变量的取值范围，可以通过打印标准头文件中的相应值来完成，也可以直接计算来做。后一种方法较困难一些，因为要确定各种浮点类型的取值范围。

** 常量
** 说明
** 算术运算符
** 关系运算符与逻辑运算符
** 类型转换
** 加一与减一运算符
** 按位运算符
** 赋值运算符与赋值表达式
** 条件表达式
** 运算符优先级与表达式求值次序
* 控制流
** 语句与分程序
** if-else语句
** else-if语句
** switch语句
** while与for循环语句
** do-while循环语句
** break语句与continue语句
** goto语句与标号
* 函数与程序结构
** 函数的基本知识
#include <stdio.h>
#define MAXLINE 100

int getline1 ( char line[  ],int max );
int strindex ( char source[  ],char searchfor[  ] );

char pattern [  ] = "olid";

void int main(int argc, char *argv[])
{
  char line[ MAXLINE ];
  int found = 0;

  while ( getline1( line,MAXLINE) > 0 )
    if ( strindex( line,pattern ) >=0 ){
      printf ("%s",line);
      found++;
    }
  return found;
}

int getline1 ( char s[  ],int lim )
{
  int c,i;

  i=0;
  while ( --lim > 0 && ( c =getchar(  ) )!=EOF && c!="\n")
    s[ i++ ] = c;
  if ( c == "\n" )
    s[ i++ ] = c;
  s[ i ]="\0";
  return i;
}

int strindex ( char s[  ],char c[  ] )
{
  int i,j,k;

  for( i=0;s[ i ]!="\0"; i++ ){
    for( j=i,k=0;t[ k ]!='\0' && s[ j ] == t[ k ];j++,k++)
      ;
    if( k > 0 && t[ k ] == '\0' )
      return i;
  }
  return -1;
}

练习4-1 编写一个函数strindex(s,t)，用于返回字符串t在s中最右出现的位置，如果s中不包含t，那么返回-1。

** 返回非整数值的函数


** 外部变量
** 作用域规则
** 头文件
** 静态变量
** 寄存器变量
** 分程序结构
** 初始化
** 递归
** C预处理程序
*** 文件包含
*** 宏替换
*** 条件包含
* 指针与数组
指针是一种用于存放另一个变量的地址的变量。
** 指针与地址
一元运算符&用于取一个对象的地址，因而语句
p=&c;
用于将c的地址赋给变量p,并且说p是指向c的指针。取地址运算符&只能应用于内存中的对象（即变量与数组元素），它不能对表达式、常量或寄存器进行操作。
一元运算符*是间接寻址或间接引用运算符，当它应用于指针时，它将访问指针所指向的对象。假定x与y是整数，且ip是指向整数的指针。下面的代码段显示了如何在程序中说明指针及怎样使用运算符&和*：
int x=1,y=2,z[10];
int *ip;  /* ip是指向整数的指针 */

ip=&x; /* ip现在指向x */
y=*ip; /* y的值现在为1 */
*ip=0; /* x的值现在为0 */
ip=&z[0];  /* ip现在指向z[0] */

** 指针与函数变元
** 指针与数组
** 地址算术运算
** 字符指针与函数
** 指针数组与指向指针的指针
** 多维数组
** 指针数组的初始化
** 指针与多维数组
** 命令行变元
** 指向函数的指针
** 复杂说明
* 结构
** 结构的基本知识
** 结构与函数
** 结构数组
** 自引用结构
** 查找表
** 类型定义
** 联合
** 位字段
* 输入与输出
** 标准输入输出
** 格式化输出——print函数
** 变长变元表
** 格式化输入——scanf函数
** 文件访问
** 错误处理——stderr和exit函数
** 行输入输出
** 其他函数
*** 字符串处理函数
*** 字符类测试和转换函数
*** ungetc函数
*** 命令执行函数
*** 存储管理函数
*** 数学函数
*** 随机数发生器函数
* UNIX系统界面
** 文件描述符
** 低级I/O——read和write系统调用
** open、creat、close和unlink系统调用
** 随机访问——lseek系统调用
** 实例——fopen和getc函数的一种实现方法
** 实例——目录显示
** 实例——存储分配程序
